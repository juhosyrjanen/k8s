version: '3'

vars:
  json_file: "vm_info.json"
  ignition_path: "ignition"

tasks:

  prerequisites:
    desc: "Install required packages"
    cmds:
      - task: check-coreos-deps
      - task: check-libvirt
      - task: check-kubetools

  check-coreos-deps:
    desc: "Check that CoreOS dependencies are installed"
    silent: true
    cmds:
      - command -v coreos-install > /dev/null 2>&1 && echo "✅ - CoreOS dependencies are installed!" || yay --noconfirm -S coreos-installer
      - command -v butane > /dev/null 2>&1 && echo "✅ - Butane is installed!" || yay --noconfirm -S butane

  check-libvirt:
    desc: "Check that libvirt is installed"
    silent: true
    cmds:
      # Check that libvirt is installed
      - systemctl status libvirtd  > /dev/null 2>&1 && echo "✅ - Libvirt is installed!" || sudo pacman --noconfirm -S libvirt && sudo systemctl enable --now libvirtd

  check-kubetools:
    desc: "Check that kubetools are installed"
    silent: true
    cmds:
      # Check that kubetools are installed
      - command -v kubectl > /dev/null 2>&1 && echo "✅ - kubectl is installed!" || sudo pacman --noconfirm -S kubectl
      - command -v kustomize > /dev/null 2>&1 && echo "✅ - kustomize is installed!" || sudo pacman --noconfirm -S kustomize
      - command -v helm > /dev/null 2>&1 &&  echo "✅ - Helm is installed!" || sudo pacman --noconfirm -S helm

  up:
    desc: "Create and start all VMs and save their info to JSON"
    cmds:
      - task: generate-ssh-key
      - task: initialize-json
      - task: create-controllers
      - task: create-loadbalancer
      - task: create-workers
      - task: finalize-json

  generate-ssh-key:
    silent: true
    desc: "Generate SSH key pair"
    cmds:
      - ssh-keygen -t rsa -b 4096 -f {{.ignition_path}}/id_rsa -N ""
      - chmod 600 {{.ignition_path}}/id_rsa

  initialize-json:
    silent: true
    desc: "Initialize the JSON file"
    cmds:
      - |
        if [ ! -f {{.json_file}} ]; then
          echo "[" > {{.json_file}}
        fi

  create-controllers:
    desc: "Create and start the controller VMs"
    cmds:
      - task: create-vm
        vars: {vm_name: "k8s-controller-1", ip: "192.168.122.101", memory: "2048", vcpus: "1"}
      - task: create-vm
        vars: {vm_name: "k8s-controller-2", ip: "192.168.122.102", memory: "2048", vcpus: "1"}
      - task: create-vm
        vars: {vm_name: "k8s-controller-3", ip: "192.168.122.103", memory: "2048", vcpus: "1"}

  create-loadbalancer:
    desc: "Create and start the load balancer VM"
    cmds:
      - task: create-vm
        vars: {vm_name: "k8s-loadbalancer", ip: "192.168.122.110", memory: "2048", vcpus: "1"}

  create-workers:
    desc: "Create and start the worker VMs"
    cmds:
      - task: create-vm
        vars: {vm_name: "k8s-worker-1", ip: "192.168.122.201", memory: "2048", vcpus: "1"}
      - task: create-vm
        vars: {vm_name: "k8s-worker-2", ip: "192.168.122.202", memory: "2048", vcpus: "1"}

  create-vm:
    silent: true
    desc: "Create a VM and save its info"
    cmds:
      - bash {{.ignition_path}}/generate-seed.sh {{.vm_name}} {{.ip}}
      - |
        virt-install \
          --name {{.vm_name}} \
          --memory {{.memory}} \
          --vcpus {{.vcpus}} \
          --disk path=images/{{.vm_name}}.qcow2,format=qcow2 \
          --cdrom seed-iso/{{.vm_name}}-seed.iso \
          --os-variant fedora-coreos-stable \
          --network network=default,model=virtio \
          --boot cdrom,hd \
          --noautoconsole > /dev/null 2>&1 \
          && echo "✅ VM {{.vm_name}} created successfully!"
      - task: save-machine-info
        vars: {name: "{{.vm_name}}", ip: "{{.ip}}", memory: "{{.memory}}", vcpus: "{{.vcpus}}"}

  save-machine-info:
    silent: true
    desc: "Save machine info to JSON file"
    cmds:
      - |
        echo '{ "name": "{{.name}}", "ip": "{{.ip}}", "memory": "{{.memory}}", "vcpus": "{{.vcpus}}" },' >> {{.json_file}}

  finalize-json:
    silent: true
    desc: "Finalize the JSON file"
    cmds:
      - sed -i '$ s/,$//' {{.json_file}}
      - echo "]" >> {{.json_file}}

  test-ssh-connections:
    desc: "Test SSH connections to all VMs"
    cmds:
      - |
        if [ -f {{.json_file}} ]; then
          IP_ADDRESSES=$(jq -r '.[].ip' {{.json_file}})
          for IP in $IP_ADDRESSES; do
            echo "Testing SSH connection to $IP..."
            ssh -o StrictHostKeyChecking=no -i {{.ignition_path}}/id_rsa core@$IP "echo ✅ Hello world from \$(hostname)" || echo "SSH connection to $IP failed."
          done
        else
          echo "JSON file {{.json_file}} not found!"
        fi

  down:
    silent: true
    desc: "Destroy and remove all VMs and clean up files"
    cmds:
      - virsh destroy k8s-controller-1 || true
      - virsh destroy k8s-controller-2 || true
      - virsh destroy k8s-controller-3 || true
      - virsh destroy k8s-loadbalancer || true
      - virsh destroy k8s-worker-1 || true
      - virsh destroy k8s-worker-2 || true
      - virsh undefine k8s-controller-1 --remove-all-storage || true
      - virsh undefine k8s-controller-2 --remove-all-storage || true
      - virsh undefine k8s-controller-3 --remove-all-storage || true
      - virsh undefine k8s-loadbalancer --remove-all-storage || true
      - virsh undefine k8s-worker-1 --remove-all-storage || true
      - virsh undefine k8s-worker-2 --remove-all-storage || true
      - rm -f {{.ignition_path}}/config*
      - rm -f {{.ignition_path}}/id_rsa.pub
      - rm -f {{.ignition_path}}/id_rsa
      - rm -rf seed-iso/
      # Cleanup known_hosts file
      - |
        if [ -f {{.json_file}} ]; then
          IP_ADDRESSES=$(jq -r '.[].ip' {{.json_file}})
          for IP in $IP_ADDRESSES; do
            ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$IP" >/dev/null 2>&1 || true
          done
        fi
      - rm -f {{.json_file}}
